import sys
import cv2
import pygame
import socket
from PyQt5 import QtWidgets, QtCore
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QMainWindow, QApplication, QLabel, QGridLayout, QTabWidget, QWidget, QVBoxLayout

pygame.init()
pygame.joystick.init()
joystick = pygame.joystick.Joystick(0)
joystick.init()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.showFullScreen()
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color: black;")

        self.tab_widget = QTabWidget(self.centralwidget)
        self.tab_widget.setStyleSheet("background-color: black; color: white;")

        self.tab1 = QWidget()
        self.grid_layout = QGridLayout(self.tab1)

        self.angle_label = QLabel("Joystick A√ßƒ±sƒ±: X: 0, Y: 0")
        self.position_label = QLabel("üåç Pozisyon: Veri Yok")
        self.velocity_label = QLabel("üèÉ Hƒ±z: Veri Yok")
        for label in [self.angle_label, self.position_label, self.velocity_label]:
            label.setStyleSheet("color: white; font-size: 16px;")

        self.grid_layout.addWidget(self.angle_label, 0, 0)
        self.grid_layout.addWidget(self.position_label, 1, 0)
        self.grid_layout.addWidget(self.velocity_label, 2, 0)

        self.camera_label = QLabel()
        self.camera_label.setAlignment(QtCore.Qt.AlignCenter)
        self.camera_label.setStyleSheet("background-color: rgba(255, 255, 255, 50);")
        self.grid_layout.addWidget(self.camera_label, 0, 1, 3, 1)

        self.tab_widget.addTab(self.tab1, "Kontrol Paneli")

        layout = QVBoxLayout(self.centralwidget)
        layout.addWidget(self.tab_widget)
        MainWindow.setCentralWidget(self.centralwidget)


class ServoMonitorApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        self.angle_timer = QTimer()
        self.angle_timer.timeout.connect(self.update_angles)
        self.angle_timer.start(100)

        self.network_timer = QTimer()
        self.network_timer.timeout.connect(self.receive_data)
        self.network_timer.start(100)

        # self.cap = cv2.VideoCapture(0)  # Kamera ge√ßici olarak devre dƒ±≈üƒ±

        self.setup_network()

    def setup_network(self):
        self.server_ip = '127.0.0.1'
        self.server_port = 12345
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.bind((self.server_ip, self.server_port))
        self.sock.listen(1)
        print("Waiting for connection...")
        self.connection, client_address = self.sock.accept()
        print(f"Connection from {client_address}")

    def update_angles(self):
        pygame.event.pump()
        x_axis = int((joystick.get_axis(0) + 1) * 75 + 15)
        y_axis = int((joystick.get_axis(1) + 1) * 75 + 15)
        x_axis, y_axis = max(15, min(165, x_axis)), max(15, min(165, y_axis))

        self.ui.angle_label.setText(f"Joystick A√ßƒ±sƒ±: X: {x_axis}, Y: {y_axis}")

    def receive_data(self):
        try:
            data = self.connection.recv(1024)
            if data:
                data_str = data.decode('ascii')
                position_data, velocity_data = data_str.split(';')
                position = [float(coord) for coord in position_data.split(',')]
                velocity = [float(coord) for coord in velocity_data.split(',')]

                self.ui.position_label.setText(f"üåç Pozisyon: {position}")
                self.ui.velocity_label.setText(f"üèÉ Hƒ±z: {velocity}")
        except Exception as e:
            print(f"Network error: {e}")

    def closeEvent(self, event):
        # if self.cap.isOpened():  # Kamera kapatma ge√ßici olarak devre dƒ±≈üƒ±
        #     self.cap.release()
        pygame.quit()
        self.connection.close()
        self.sock.close()
        super().closeEvent(event)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ServoMonitorApp()
    window.show()
    sys.exit(app.exec_())
